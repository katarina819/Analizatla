// <auto-generated />
using System;
using BACKEND.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BACKEND.Migrations
{
    [DbContext(typeof(EdunovaContext))]
    partial class EdunovaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BACKEND.Models.Analiticar", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sifra"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kontakt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrucnaSprema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sifra");

                    b.ToTable("Analiticari");
                });

            modelBuilder.Entity("BACKEND.Models.Analiza", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sifra"));

                    b.Property<int>("AnaliticarId")
                        .HasColumnType("int")
                        .HasColumnName("analiticar");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fosfor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Humus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Kalij")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Karbonati")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Magnezij")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UzorakTlaId")
                        .HasColumnType("int")
                        .HasColumnName("uzoraktla");

                    b.Property<decimal>("pHVrijednost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Sifra");

                    b.HasIndex("AnaliticarId");

                    b.HasIndex("UzorakTlaId");

                    b.ToTable("Analize");
                });

            modelBuilder.Entity("BACKEND.Models.Lokacija", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sifra"));

                    b.Property<string>("MjestoUzorkovanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sifra");

                    b.ToTable("Lokacije");
                });

            modelBuilder.Entity("BACKEND.Models.Operater", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sifra"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sifra");

                    b.ToTable("operateri", (string)null);
                });

            modelBuilder.Entity("BACKEND.Models.Uzorcitla", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sifra"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2")
                        .HasColumnName("datum");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int")
                        .HasColumnName("lokacija");

                    b.Property<decimal>("MasaUzorka")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("masauzorka");

                    b.Property<string>("VrstaTla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vrstatla");

                    b.HasKey("Sifra");

                    b.HasIndex("LokacijaId");

                    b.ToTable("uzorcitla");
                });

            modelBuilder.Entity("BACKEND.Models.Analiza", b =>
                {
                    b.HasOne("BACKEND.Models.Analiticar", "Analiticar")
                        .WithMany("Analize")
                        .HasForeignKey("AnaliticarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKEND.Models.Uzorcitla", "UzorakTla")
                        .WithMany("Analize")
                        .HasForeignKey("UzorakTlaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analiticar");

                    b.Navigation("UzorakTla");
                });

            modelBuilder.Entity("BACKEND.Models.Uzorcitla", b =>
                {
                    b.HasOne("BACKEND.Models.Lokacija", "Lokacija")
                        .WithMany("UzorciTla")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("BACKEND.Models.Analiticar", b =>
                {
                    b.Navigation("Analize");
                });

            modelBuilder.Entity("BACKEND.Models.Lokacija", b =>
                {
                    b.Navigation("UzorciTla");
                });

            modelBuilder.Entity("BACKEND.Models.Uzorcitla", b =>
                {
                    b.Navigation("Analize");
                });
#pragma warning restore 612, 618
        }
    }
}
